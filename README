/**********************************************************
* Assignment 2: Informed Search
* CS 131
* README, 2/21/23
* John Eastman 
*********************************************************/

Summary:
    This is a C++ program that solves the pancake problem using informed search
(A*) and uninformed search (UCS). The program is implemented in C++ and 
uses priority queues to explore the search space. The heuristic function used 
for the A* searchis the gap heuristic function from the assignment page in Canvas.
The backward cost is defined as the number of flips needed to reach the current state 
from the initial state. This is equal to the depth of the current state in the 
search tree.

    The pancake problem involves a stack of pancakes of varying sizes placed on a plate. 
The goal is to arrange the stack so that the largest pancake is on the bottom and the 
smallest pancake is on top. The only allowed operation is to insert a spatula at any point 
in the stack (except for below the plate) and flip all the pancakes above the spatula.

Usage:
    ./AstarPancakes -- Performs A* search for the pancake problem
    ./UCSPancakes -- Performs the UCS search for the pancake problem

Sources:

    For the "struct VectorHasher"...
    Credit: StackOverflow -- link:
    https://stackoverflow.com/questions/10405030/c-unordered-map-fail-when-used-with-a-vector-as-key

        Defines a hash function for vectors of integers. It is used to define
        the hash function for the closed list, which is a hash set of previously 
        visited nodes.

    For the "gap heuristic function"...
    Credit: "Landmark Heuristics for the Pancake Problem." By Malte Helmert